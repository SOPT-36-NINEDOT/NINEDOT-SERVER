name: ü©µ CI ü©µ

on:
  pull_request:
    branches: [ "develop", "main" ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch: { }

permissions:
  contents: read
  checks: write
  pull-requests: write
  issues: write

concurrency:
  group: pr-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: "-Dorg.gradle.vfs.watch=false"
      GOOGLE_CLIENT_ID: dummy
      GOOGLE_CLIENT_SECRET: dummy
      GOOGLE_REDIRECT_URI: http://localhost/callback
      JWT_SECRET_KEY: MDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWY=

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - uses: gradle/actions/setup-gradle@v3
        if: ${{ !env.ACT }}
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}
          gradle-home-cache-cleanup: true

      - name: Gradle assemble (no tests)
        run: ./gradlew :ninedot-api:assemble --no-daemon --stacktrace --info --no-watch-fs

      - name: Gradle unit tests (domain + application [+ api])
        run: |
          ./gradlew :ninedot-domain:test :ninedot-application:test :ninedot-api:test \
            -Dspring.profiles.active=test --no-daemon --stacktrace --info --no-watch-fs

      - name: Gradle test
        id: test
        continue-on-error: true
        run: |
          ./gradlew test -Dspring.profiles.active=test \
            --no-daemon --stacktrace --info --no-watch-fs

      - name: Publish unit-test results (check UI)
        id: publish
        if: ${{ always() && !env.ACT && hashFiles('**/build/test-results/test/**/*.xml') != '' }}
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: "**/build/test-results/test/**/*.xml"
          comment_mode: off
          check_run: ${{ !github.event.pull_request.head.repo.fork }}
          job_summary: true

      - name: Compose message
        id: status
        if: ${{ always() }}
        env:
          ASSEMBLE: ${{ steps.assemble.conclusion }}
          TEST: ${{ steps.test.conclusion }}
          PUBLISH: ${{ steps.publish.outcome }}
        run: |
          if [ "$ASSEMBLE" = "success" ]; then
            MSG="‚úÖ Assemble ÏÑ±Í≥µ"
          else
            MSG="‚ùå Assemble Ïã§Ìå®"
          fi

          if [ "$TEST" = "success" ]; then
            MSG="$MSG"$'\n'"‚úÖ Test ÏÑ±Í≥µ"
          else
            MSG="$MSG"$'\n'"‚ùå Test Ïã§Ìå®"
          fi

          if [ "$PUBLISH" = "failure" ]; then
            MSG="$MSG"$'\n'"‚ö†Ô∏è ÌÖåÏä§Ìä∏ Î¶¨Ìè¨Ìä∏ Í≤åÏãú Ïã§Ìå®(Í∂åÌïú/ÌÜ†ÌÅ∞ Î¨∏Ï†úÏùº Ïàò ÏûàÏùå)"
          fi

          printf "message<<EOF\n%s\nEOF\n" "$MSG" >> "$GITHUB_OUTPUT"

      - name: Find existing CI status comment
        id: find-comment
        if: ${{ always() && github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork && !env.ACT }}
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'CI status'

      - name: Create or update PR comment
        if: ${{ always() && github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork && !env.ACT }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            **CI status**
            ${{ steps.status.outputs.message }}

      - name: Fail if any failed
        if: ${{ failure() }}
        run: exit 1
