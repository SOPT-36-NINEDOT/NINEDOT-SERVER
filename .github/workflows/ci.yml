name: 🩵 CI 🩵

on:
  pull_request:
    branches: [ "develop", "main" ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch: { }

permissions:
  contents: read
  checks: write
  pull-requests: write
  issues: write

concurrency:
  group: pr-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  GRADLE_OPTS: "-Dorg.gradle.vfs.watch=false"
  GOOGLE_CLIENT_ID: dummy
  GOOGLE_CLIENT_SECRET: dummy
  GOOGLE_REDIRECT_URI: http://localhost/callback
  JWT_SECRET_KEY: MDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWY=
  ACT: "false"

jobs:
  assemble:
    name: Assemble
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - uses: gradle/actions/setup-gradle@v3
        if: ${{ env.ACT != 'true' }}
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}
          gradle-home-cache-cleanup: true

      - name: Gradle assemble (no tests)
        run: ./gradlew :ninedot-api:assemble --no-daemon --stacktrace --info --no-watch-fs

  test:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - uses: gradle/actions/setup-gradle@v3
        if: ${{ env.ACT != 'true' }}
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}
          gradle-home-cache-cleanup: true

      - name: Gradle unit tests (domain + application + api)
        run: |
          ./gradlew :ninedot-domain:test :ninedot-application:test :ninedot-api:test \
            -Dspring.profiles.active=test --no-daemon --stacktrace --info --no-watch-fs

  report:
    name: Report status to PR
    runs-on: ubuntu-latest
    needs: [ assemble, test ]
    if: ${{ always() && github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork }}
    steps:
      - name: Compose status message
        id: status
        run: |
          a="${{ needs.assemble.result }}"
          t="${{ needs.test.result }}"
          msg="**CI status**%0A"
          if [ "$a" = "success" ]; then
            msg="$msg ✅ assemble: success%0A"
          else
            msg="$msg ❌ assemble: $a%0A"
          fi
          if [ "$t" = "success" ]; then
            msg="$msg ✅ test: success%0A"
          else
            msg="$msg ❌ test: $t%0A"
          fi
          echo "message=$msg" >> "$GITHUB_OUTPUT"

      - name: Find existing comment
        if: ${{ env.ACT != 'true' }}
        id: find-comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '**CI status**'

      - name: Create or update PR comment
        if: ${{ env.ACT != 'true' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          edit-mode: replace
          body: ${{ steps.status.outputs.message }}
