name: 🩵 CI 🩵

on:
  pull_request:
    branches: [ "develop", "main" ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch: { }

permissions:
  contents: read
  checks: write
  pull-requests: write
  issues: write

concurrency:
  group: pr-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  GRADLE_OPTS: "-Dorg.gradle.vfs.watch=false"
  GOOGLE_CLIENT_ID: dummy
  GOOGLE_CLIENT_SECRET: dummy
  GOOGLE_REDIRECT_URI: http://localhost/callback
  JWT_SECRET_KEY: MDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWY=
  ACT: "false"

jobs:
  assemble:
    name: Assemble
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}
          gradle-home-cache-cleanup: true
      - name: Gradle assemble (no tests)
        run: ./gradlew :ninedot-api:assemble --no-daemon --stacktrace --info --no-watch-fs

  test:
    name: Test & Report Coverage
    runs-on: ubuntu-latest
    outputs:
      line: ${{ steps.calc.outputs.line }}
      branch: ${{ steps.calc.outputs.branch }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}
          gradle-home-cache-cleanup: true

      - name: Run all tests and generate api module coverage report
        run: |
          ./gradlew test :ninedot-api:jacocoTestReport \
            -Dspring.profiles.active=test --no-daemon --stacktrace --info --no-watch-fs

      - name: Calculate coverage % from api module report
        id: calc
        shell: bash
        run: |
          python3 -c "
          import xml.etree.ElementTree as ET
          from decimal import Decimal, ROUND_HALF_UP
          
          xml_file = 'ninedot-api/build/reports/jacoco/test/jacocoTestReport.xml'
          line_pct_str = '0.00'
          branch_pct_str = '0.00'
          
          try:
              tree = ET.parse(xml_file)
              root = tree.getroot()
          
              report_counter_line = root.find(\"./counter[@type='LINE']\")
              if report_counter_line is not None:
                  missed = Decimal(report_counter_line.get('missed', '0'))
                  covered = Decimal(report_counter_line.get('covered', '0'))
                  total = missed + covered
                  if total > 0:
                      line_pct = (covered / total * 100).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
                      line_pct_str = str(line_pct)
          
              report_counter_branch = root.find(\"./counter[@type='BRANCH']\")
              if report_counter_branch is not None:
                  missed = Decimal(report_counter_branch.get('missed', '0'))
                  covered = Decimal(report_counter_branch.get('covered', '0'))
                  total = missed + covered
                  if total > 0:
                      branch_pct = (covered / total * 100).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
                      branch_pct_str = str(branch_pct)
          
          except (ET.ParseError, FileNotFoundError):
              print('JaCoCo report file not found or is invalid. Reporting 0% coverage.')
          
          print(f'line={line_pct_str}')
          print(f'branch={branch_pct_str}')
          " >> "$GITHUB_OUTPUT"

  report:
    name: Report status to PR
    runs-on: ubuntu-latest
    needs: [ assemble, test ]
    if: ${{ always() && github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork }}
    steps:
      - name: Compose status message
        id: status
        run: |
          a="${{ needs.assemble.result }}"
          t="${{ needs.test.result }}"
          line="${{ needs.test.outputs.line }}"
          branch="${{ needs.test.outputs.branch }}"
          
          {
            echo "message<<EOF"
            echo "**CI status**"
            if [ "$a" = "success" ]; then echo "✅ assemble: success"; else echo "❌ assemble: $a"; fi
            if [ "$t" = "success" ]; then echo "✅ test & coverage: success"; else echo "❌ test & coverage: $t"; fi
            echo ""
            echo "**Coverage (ninedot-api)**"
            echo "- LINE: ${line}%"
            echo "- BRANCH: ${branch}%"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Find existing comment
        id: find-comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '**CI status**'

      - name: Create or update PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          edit-mode: replace
          body: ${{ steps.status.outputs.message }}
