plugins {
    id 'org.springframework.boot' version '3.3.6'
    id 'io.spring.dependency-management'
    id 'java'
    id 'jacoco'
}

java { toolchain { languageVersion = JavaLanguageVersion.of(17) } }

dependencies {
    implementation project(':ninedot-application')
    implementation project(':ninedot-domain')
    implementation project(':ninedot-global')
    implementation project(':ninedot-infrastructure')

    // Web & API
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Security & OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    testImplementation 'org.springframework.security:spring-security-test'

    // Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // lombok
    compileOnly "org.projectlombok:lombok:1.18.34"
    annotationProcessor "org.projectlombok:lombok:1.18.34"

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'
}

tasks.named('jar') { enabled = false }
tasks.named('bootJar') { enabled = true }

jacoco {
    toolVersion = "0.8.11"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    finalizedBy(tasks.named("jacocoTestReport"))
}

tasks.named("jacocoTestReport", JacocoReport) {
    dependsOn tasks.named("test")

    reports {
        xml.required = true
        xml.outputLocation = layout.buildDirectory.file("reports/jacoco/jacocoTestReport.xml")
        html.required = true
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
        csv.required = false
    }

    def excludes = [
            // 실행 파일
            '**/*Application*',

            // dto
            '**/*Request*', '**/*Response*', '**/*Command*', '**/*Query*', '**/*Result*', '**/*Mapper*',

            // 설정 파일
            '**/*Config*',

            // 예외 관련 파일
            '**/*Exception*', '**/*Error*',

            // QueryDSL 생성 클래스
            '**/Q*.*',
    ]

    doFirst {
        classDirectories.setFrom(
                files(sourceSets.main.output).collect { dir ->
                    fileTree(dir: dir, exclude: excludes)
                }
        )
        sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
        additionalSourceDirs.setFrom(files(sourceSets.main.allSource.srcDirs))
        executionData.setFrom(fileTree(layout.buildDirectory.asFile.get()) {
            include "jacoco/test.exec", "jacoco/*.exec", "outputs/unit_test_code_coverage/*/jacoco.exec"
        })
    }
}
